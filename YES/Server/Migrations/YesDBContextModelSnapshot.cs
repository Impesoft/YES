// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YES.Server.Data.Database;

namespace YES.Server.Migrations
{
    [DbContext(typeof(YesDBContext))]
    partial class YesDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("YES.Server.Data.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StreetNumber")
                        .HasColumnType("int");

                    b.Property<int?>("TicketCustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketProviderId")
                        .HasColumnType("int");

                    b.Property<int?>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketCustomerId")
                        .IsUnique()
                        .HasFilter("[TicketCustomerId] IS NOT NULL");

                    b.HasIndex("TicketProviderId")
                        .IsUnique()
                        .HasFilter("[TicketProviderId] IS NOT NULL");

                    b.HasIndex("VenueId")
                        .IsUnique()
                        .HasFilter("[VenueId] IS NOT NULL");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Gent",
                            Country = "België",
                            PostalCode = "9000",
                            Street = "Sint-Pietersnieuwstraat",
                            StreetNumber = 23,
                            TicketProviderId = 1,
                            VenueId = 1
                        },
                        new
                        {
                            Id = 2,
                            City = "Gent",
                            Country = "België",
                            PostalCode = "9000",
                            Street = "Tentoonstellingslaan",
                            StreetNumber = 1,
                            TicketCustomerId = 1
                        },
                        new
                        {
                            Id = 3,
                            City = "Gent",
                            Country = "België",
                            PostalCode = "9000",
                            Street = "Leeuwstraat",
                            StreetNumber = 7,
                            TicketCustomerId = 2
                        },
                        new
                        {
                            Id = 4,
                            City = "Gent",
                            Country = "België",
                            PostalCode = "9000",
                            Street = "Zebrastraat",
                            StreetNumber = 36,
                            TicketCustomerId = 3
                        },
                        new
                        {
                            Id = 5,
                            City = "Gent",
                            Country = "België",
                            PostalCode = "9000",
                            Street = "Tijgerstraat",
                            StreetNumber = 24,
                            TicketCustomerId = 4
                        },
                        new
                        {
                            Id = 6,
                            City = "Gent",
                            Country = "België",
                            PostalCode = "9000",
                            Street = "Olifantstraat",
                            StreetNumber = 79,
                            TicketCustomerId = 5
                        });
                });

            modelBuilder.Entity("YES.Server.Data.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TicketProviderId")
                        .HasColumnType("int");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketProviderId");

                    b.HasIndex("VenueId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = 0,
                            TicketProviderId = 1,
                            VenueId = 1
                        },
                        new
                        {
                            Id = 2,
                            Status = 0,
                            TicketProviderId = 1,
                            VenueId = 1
                        },
                        new
                        {
                            Id = 3,
                            Status = 0,
                            TicketProviderId = 1,
                            VenueId = 1
                        },
                        new
                        {
                            Id = 4,
                            Status = 2,
                            TicketProviderId = 1,
                            VenueId = 1
                        });
                });

            modelBuilder.Entity("YES.Server.Data.Entities.EventInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BannerImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("MaxAvailableTickets")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("EventInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Uitzending EK openingswedstrijd tussen gastland Rusland en België, wees er tijdig bij want door corona zijn de plaatsen beperkt",
                            EventDate = new DateTime(2021, 6, 12, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 1,
                            MaxAvailableTickets = 500,
                            Name = "EK België-Rusland",
                            WebsiteUrl = "https://www.vooruit.be/nl/agenda/3837//EK_Belgie_Rusland_op_groot_scherm"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Uitzending EK wedstrijd tussen België en Denemarken, wees er tijdig bij want door corona zijn de plaatsen beperkt",
                            EventDate = new DateTime(2021, 6, 18, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 2,
                            MaxAvailableTickets = 500,
                            Name = "EK België-Denemarken"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Uitzending EK wedstrijd tussen België en Finland, wees er tijdig bij want door corona zijn de plaatsen beperkt",
                            EventDate = new DateTime(2021, 6, 21, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 3,
                            MaxAvailableTickets = 500,
                            Name = "EK België-Finland"
                        },
                        new
                        {
                            Id = 4,
                            BannerImgUrl = "https://www.vooruit.be/cms_files/system/images/img11483_174.jpg",
                            Description = "Wees er tijdig bij want door corona zijn de plaatsen beperkt",
                            EventId = 4,
                            MaxAvailableTickets = 50,
                            Name = "UITGESTELD: Terras Sessie: Joni Sheila",
                            WebsiteUrl = "https://www.vooruit.be/nl/agenda/3771//TERRAS_SESSIE_10_Joni_Sheila"
                        });
                });

            modelBuilder.Entity("YES.Server.Data.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfPurchase")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("TicketCustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TicketCustomerId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfPurchase = new DateTime(2021, 6, 10, 18, 52, 15, 121, DateTimeKind.Local).AddTicks(5452),
                            EventId = 1,
                            TicketCustomerId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateOfPurchase = new DateTime(2021, 6, 10, 18, 52, 15, 124, DateTimeKind.Local).AddTicks(9669),
                            EventId = 1,
                            TicketCustomerId = 1
                        },
                        new
                        {
                            Id = 3,
                            DateOfPurchase = new DateTime(2021, 6, 10, 18, 52, 15, 124, DateTimeKind.Local).AddTicks(9729),
                            EventId = 1,
                            TicketCustomerId = 1
                        },
                        new
                        {
                            Id = 4,
                            DateOfPurchase = new DateTime(2021, 6, 10, 18, 52, 15, 124, DateTimeKind.Local).AddTicks(9736),
                            EventId = 1,
                            TicketCustomerId = 1
                        },
                        new
                        {
                            Id = 5,
                            DateOfPurchase = new DateTime(2021, 6, 10, 18, 52, 15, 124, DateTimeKind.Local).AddTicks(9739),
                            EventId = 1,
                            TicketCustomerId = 1
                        },
                        new
                        {
                            Id = 6,
                            DateOfPurchase = new DateTime(2021, 6, 10, 18, 52, 15, 124, DateTimeKind.Local).AddTicks(9742),
                            EventId = 1,
                            TicketCustomerId = 2
                        },
                        new
                        {
                            Id = 7,
                            DateOfPurchase = new DateTime(2021, 6, 10, 18, 52, 15, 124, DateTimeKind.Local).AddTicks(9745),
                            EventId = 1,
                            TicketCustomerId = 2
                        },
                        new
                        {
                            Id = 8,
                            DateOfPurchase = new DateTime(2021, 6, 10, 18, 52, 15, 124, DateTimeKind.Local).AddTicks(9748),
                            EventId = 1,
                            TicketCustomerId = 3
                        },
                        new
                        {
                            Id = 9,
                            DateOfPurchase = new DateTime(2021, 6, 10, 18, 52, 15, 124, DateTimeKind.Local).AddTicks(9751),
                            EventId = 1,
                            TicketCustomerId = 3
                        },
                        new
                        {
                            Id = 10,
                            DateOfPurchase = new DateTime(2021, 6, 10, 18, 52, 15, 124, DateTimeKind.Local).AddTicks(9754),
                            EventId = 1,
                            TicketCustomerId = 3
                        },
                        new
                        {
                            Id = 11,
                            DateOfPurchase = new DateTime(2021, 6, 10, 18, 52, 15, 124, DateTimeKind.Local).AddTicks(9757),
                            EventId = 1,
                            TicketCustomerId = 3
                        },
                        new
                        {
                            Id = 12,
                            DateOfPurchase = new DateTime(2021, 6, 10, 18, 52, 15, 124, DateTimeKind.Local).AddTicks(9760),
                            EventId = 1,
                            TicketCustomerId = 4
                        },
                        new
                        {
                            Id = 13,
                            DateOfPurchase = new DateTime(2021, 6, 10, 18, 52, 15, 124, DateTimeKind.Local).AddTicks(9763),
                            EventId = 1,
                            TicketCustomerId = 4
                        },
                        new
                        {
                            Id = 14,
                            DateOfPurchase = new DateTime(2021, 6, 10, 18, 52, 15, 124, DateTimeKind.Local).AddTicks(9766),
                            EventId = 1,
                            TicketCustomerId = 5
                        },
                        new
                        {
                            Id = 15,
                            DateOfPurchase = new DateTime(2021, 6, 10, 18, 52, 15, 124, DateTimeKind.Local).AddTicks(9769),
                            EventId = 1,
                            TicketCustomerId = 5
                        },
                        new
                        {
                            Id = 16,
                            DateOfPurchase = new DateTime(2021, 6, 10, 18, 52, 15, 124, DateTimeKind.Local).AddTicks(9772),
                            EventId = 1,
                            TicketCustomerId = 5
                        });
                });

            modelBuilder.Entity("YES.Server.Data.Entities.TicketCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TicketCustomers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BankAccount = "BE68 5390 0754 7034",
                            Email = "kobe@mail.com",
                            FirstName = "Kobe",
                            LastName = "Delobelle",
                            PhoneNumber = "0473 288 888"
                        },
                        new
                        {
                            Id = 2,
                            BankAccount = "BE68 6990 5800 7574",
                            Email = "ward@mail.com",
                            FirstName = "Ward",
                            LastName = "Impe",
                            PhoneNumber = "0473 422 458"
                        },
                        new
                        {
                            Id = 3,
                            BankAccount = "BE60 5590 0994 7021",
                            Email = "Pieter@mail.com",
                            FirstName = "Pieter",
                            LastName = "Corp",
                            PhoneNumber = "0453 288 888"
                        },
                        new
                        {
                            Id = 4,
                            BankAccount = "BE70 5560 1278 7078",
                            Email = "Seba@mail.com",
                            FirstName = "Seba",
                            LastName = "Stiaan",
                            PhoneNumber = "0485 345 349"
                        },
                        new
                        {
                            Id = 5,
                            BankAccount = "BE77 7893 0824 7304",
                            Email = "Nick@mail.com",
                            FirstName = "Nick",
                            LastName = "Angularlover",
                            PhoneNumber = "0478 365 852"
                        });
                });

            modelBuilder.Entity("YES.Server.Data.Entities.TicketPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId")
                        .IsUnique();

                    b.ToTable("TicketPrices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 1
                        },
                        new
                        {
                            Id = 2,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 2
                        },
                        new
                        {
                            Id = 3,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 3
                        },
                        new
                        {
                            Id = 4,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 4
                        },
                        new
                        {
                            Id = 5,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 5
                        },
                        new
                        {
                            Id = 6,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 6
                        },
                        new
                        {
                            Id = 7,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 7
                        },
                        new
                        {
                            Id = 8,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 8
                        },
                        new
                        {
                            Id = 9,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 9
                        },
                        new
                        {
                            Id = 10,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 10
                        },
                        new
                        {
                            Id = 11,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 11
                        },
                        new
                        {
                            Id = 12,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 12
                        },
                        new
                        {
                            Id = 13,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 13
                        },
                        new
                        {
                            Id = 14,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 14
                        },
                        new
                        {
                            Id = 15,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 15
                        },
                        new
                        {
                            Id = 16,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 16
                        });
                });

            modelBuilder.Entity("YES.Server.Data.Entities.TicketProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TicketProviders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BankAccount = "BE78 3590 0754 7674",
                            Email = "info@vooruit.be",
                            NameProvider = "Vooruit",
                            PhoneNumber = "09 267 28 20"
                        });
                });

            modelBuilder.Entity("YES.Server.Data.Entities.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Venues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 1200,
                            Name = "Kunstencentrum Vooruit"
                        });
                });

            modelBuilder.Entity("YES.Server.Data.Entities.Address", b =>
                {
                    b.HasOne("YES.Server.Data.Entities.TicketCustomer", "TicketCustomer")
                        .WithOne("Address")
                        .HasForeignKey("YES.Server.Data.Entities.Address", "TicketCustomerId");

                    b.HasOne("YES.Server.Data.Entities.TicketProvider", "TicketProvider")
                        .WithOne("Address")
                        .HasForeignKey("YES.Server.Data.Entities.Address", "TicketProviderId");

                    b.HasOne("YES.Server.Data.Entities.Venue", "Venue")
                        .WithOne("Address")
                        .HasForeignKey("YES.Server.Data.Entities.Address", "VenueId");

                    b.Navigation("TicketCustomer");

                    b.Navigation("TicketProvider");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("YES.Server.Data.Entities.Event", b =>
                {
                    b.HasOne("YES.Server.Data.Entities.TicketProvider", "TicketProvider")
                        .WithMany("Events")
                        .HasForeignKey("TicketProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YES.Server.Data.Entities.Venue", "Venue")
                        .WithMany("Events")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TicketProvider");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("YES.Server.Data.Entities.EventInfo", b =>
                {
                    b.HasOne("YES.Server.Data.Entities.Event", null)
                        .WithOne("EventInfo")
                        .HasForeignKey("YES.Server.Data.Entities.EventInfo", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YES.Server.Data.Entities.Ticket", b =>
                {
                    b.HasOne("YES.Server.Data.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YES.Server.Data.Entities.TicketCustomer", "TicketCustomer")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("TicketCustomer");
                });

            modelBuilder.Entity("YES.Server.Data.Entities.TicketPrice", b =>
                {
                    b.HasOne("YES.Server.Data.Entities.Ticket", "Ticket")
                        .WithOne("TicketPrice")
                        .HasForeignKey("YES.Server.Data.Entities.TicketPrice", "TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("YES.Server.Data.Entities.Event", b =>
                {
                    b.Navigation("EventInfo");
                });

            modelBuilder.Entity("YES.Server.Data.Entities.Ticket", b =>
                {
                    b.Navigation("TicketPrice");
                });

            modelBuilder.Entity("YES.Server.Data.Entities.TicketCustomer", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("YES.Server.Data.Entities.TicketProvider", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("YES.Server.Data.Entities.Venue", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
