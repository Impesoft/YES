// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YES.Server.Data.Database;

namespace YES.Server.Migrations
{
    [DbContext(typeof(YesDBContext))]
    partial class YesDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("YES.Server.Data.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StreetNumber")
                        .HasColumnType("int");

                    b.Property<int?>("TicketCustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketProviderId")
                        .HasColumnType("int");

                    b.Property<int?>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketCustomerId")
                        .IsUnique()
                        .HasFilter("[TicketCustomerId] IS NOT NULL");

                    b.HasIndex("TicketProviderId")
                        .IsUnique()
                        .HasFilter("[TicketProviderId] IS NOT NULL");

                    b.HasIndex("VenueId")
                        .IsUnique()
                        .HasFilter("[VenueId] IS NOT NULL");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Gent",
                            Country = "België",
                            PostalCode = "9000",
                            Street = "Sint-Pietersnieuwstraat",
                            StreetNumber = 23,
                            TicketProviderId = 1,
                            VenueId = 1
                        },
                        new
                        {
                            Id = 2,
                            City = "Gent",
                            Country = "België",
                            PostalCode = "9000",
                            Street = "Tentoonstellingslaan",
                            StreetNumber = 1,
                            TicketCustomerId = 1
                        },
                        new
                        {
                            Id = 3,
                            City = "Gent",
                            Country = "België",
                            PostalCode = "9000",
                            Street = "Leeuwstraat",
                            StreetNumber = 7,
                            TicketCustomerId = 2
                        },
                        new
                        {
                            Id = 4,
                            City = "Gent",
                            Country = "België",
                            PostalCode = "9000",
                            Street = "Zebrastraat",
                            StreetNumber = 36,
                            TicketCustomerId = 3
                        },
                        new
                        {
                            Id = 5,
                            City = "Gent",
                            Country = "België",
                            PostalCode = "9000",
                            Street = "Tijgerstraat",
                            StreetNumber = 24,
                            TicketCustomerId = 4
                        },
                        new
                        {
                            Id = 6,
                            City = "Sint-Niklaas",
                            Country = "België",
                            PostalCode = "9100",
                            Street = "Apostelstraat",
                            StreetNumber = 79,
                            TicketCustomerId = 5
                        },
                        new
                        {
                            Id = 7,
                            City = "Gent",
                            Country = "België",
                            PostalCode = "9000",
                            Street = "Olifantstraat",
                            StreetNumber = 26,
                            TicketCustomerId = 6
                        },
                        new
                        {
                            Id = 8,
                            City = "Gent",
                            Country = "België",
                            PostalCode = "9000",
                            Street = "Olifantstraat",
                            StreetNumber = 2,
                            TicketCustomerId = 7
                        },
                        new
                        {
                            Id = 9,
                            City = "Sint-Joost-ten-Node",
                            Country = "België",
                            PostalCode = "1210",
                            Street = "Kleine Dalstraat",
                            StreetNumber = 1,
                            TicketCustomerId = 8
                        },
                        new
                        {
                            Id = 11,
                            City = "Etterbeek",
                            Country = "België",
                            PostalCode = "1040",
                            Street = "Waversesteenweg",
                            StreetNumber = 100,
                            TicketCustomerId = 9
                        },
                        new
                        {
                            Id = 12,
                            City = "Waver",
                            Country = "België",
                            PostalCode = "1300",
                            Street = "Rue de la Cure",
                            StreetNumber = 3,
                            TicketCustomerId = 10
                        },
                        new
                        {
                            Id = 13,
                            City = "Mechelen",
                            Country = "België",
                            PostalCode = "2800",
                            Street = "Spuibeekstraat",
                            StreetNumber = 4,
                            TicketCustomerId = 11
                        },
                        new
                        {
                            Id = 14,
                            City = "Duffel",
                            Country = "België",
                            PostalCode = "2570",
                            Street = "Beukheuvel",
                            StreetNumber = 20,
                            TicketCustomerId = 12
                        },
                        new
                        {
                            Id = 15,
                            City = "Kortrijk",
                            Country = "België",
                            PostalCode = "8500",
                            Street = "Nijverheidskaai",
                            StreetNumber = 13,
                            TicketCustomerId = 13
                        },
                        new
                        {
                            Id = 16,
                            City = "Wevelgem",
                            Country = "België",
                            PostalCode = "8560",
                            Street = "Hondsschotestraat",
                            StreetNumber = 83,
                            TicketCustomerId = 14
                        },
                        new
                        {
                            Id = 17,
                            City = "Ieper",
                            Country = "België",
                            PostalCode = "8900",
                            Street = "Tybaertstraat",
                            StreetNumber = 27,
                            TicketCustomerId = 15
                        },
                        new
                        {
                            Id = 18,
                            City = "Oostende",
                            Country = "België",
                            PostalCode = "8400",
                            Street = "Stapelhuisstraat",
                            StreetNumber = 17,
                            TicketCustomerId = 16
                        },
                        new
                        {
                            Id = 19,
                            City = "Gent",
                            Country = "België",
                            PostalCode = "9000",
                            Street = "Graaf Van Vlaanderenplein",
                            StreetNumber = 5,
                            VenueId = 2
                        },
                        new
                        {
                            Id = 20,
                            City = "Antwerpen",
                            Country = "België",
                            PostalCode = "2140",
                            Street = "Noordersingel",
                            StreetNumber = 28,
                            TicketProviderId = 9,
                            VenueId = 3
                        },
                        new
                        {
                            Id = 21,
                            City = "Gent",
                            Country = "België",
                            PostalCode = "9000",
                            Street = "Overpoortstraat",
                            StreetNumber = 60,
                            TicketProviderId = 8,
                            VenueId = 4
                        },
                        new
                        {
                            Id = 22,
                            City = "Antwerpen",
                            Country = "België",
                            PostalCode = "2170",
                            Street = "Schijnpoortweg",
                            StreetNumber = 119,
                            TicketProviderId = 7,
                            VenueId = 5
                        },
                        new
                        {
                            Id = 23,
                            City = "Boom",
                            Country = "België",
                            PostalCode = "2850",
                            Street = "Schommelei",
                            StreetNumber = 1,
                            VenueId = 6
                        },
                        new
                        {
                            Id = 24,
                            City = "Werchter",
                            Country = "België",
                            PostalCode = "3118",
                            Street = "Festivalpark",
                            StreetNumber = 0,
                            VenueId = 7
                        },
                        new
                        {
                            Id = 25,
                            City = "Brussel",
                            Country = "België",
                            PostalCode = "1020",
                            Street = "Eeuwfeestlaan",
                            StreetNumber = 617,
                            TicketProviderId = 4,
                            VenueId = 8
                        },
                        new
                        {
                            Id = 26,
                            City = "Hasselt",
                            Country = "België",
                            PostalCode = "3500",
                            Street = "Kempische Steenweg",
                            StreetNumber = 0,
                            VenueId = 9
                        },
                        new
                        {
                            Id = 27,
                            City = "Houthalen-Helchteren",
                            Country = "België",
                            PostalCode = "3530",
                            Street = "Binnenvaartstraat",
                            StreetNumber = 0,
                            VenueId = 10
                        },
                        new
                        {
                            Id = 28,
                            City = "Antwerpen",
                            Country = "België",
                            PostalCode = "6200",
                            Street = "Korte Vlierstraat",
                            StreetNumber = 6,
                            TicketProviderId = 2
                        },
                        new
                        {
                            Id = 29,
                            City = "Mechelen",
                            Country = "België",
                            PostalCode = "2800",
                            Street = "Blarenberglaan",
                            StreetNumber = 3,
                            TicketProviderId = 3
                        },
                        new
                        {
                            Id = 30,
                            City = "Hasselt",
                            Country = "België",
                            PostalCode = "3510",
                            Street = "Koorstraat",
                            StreetNumber = 17,
                            TicketProviderId = 5
                        },
                        new
                        {
                            Id = 31,
                            City = "Antwerpen",
                            Country = "België",
                            PostalCode = "2000",
                            Street = "Braziliestraat",
                            StreetNumber = 26,
                            TicketProviderId = 6
                        });
                });

            modelBuilder.Entity("YES.Server.Data.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TicketProviderId")
                        .HasColumnType("int");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketProviderId");

                    b.HasIndex("VenueId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = 0,
                            TicketProviderId = 1,
                            VenueId = 1
                        },
                        new
                        {
                            Id = 2,
                            Status = 0,
                            TicketProviderId = 1,
                            VenueId = 1
                        },
                        new
                        {
                            Id = 3,
                            Status = 0,
                            TicketProviderId = 1,
                            VenueId = 1
                        },
                        new
                        {
                            Id = 4,
                            Status = 2,
                            TicketProviderId = 1,
                            VenueId = 1
                        });
                });

            modelBuilder.Entity("YES.Server.Data.Entities.EventInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BannerImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("MaxAvailableTickets")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("EventInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Uitzending EK openingswedstrijd tussen gastland Rusland en België, wees er tijdig bij want door corona zijn de plaatsen beperkt",
                            EventDate = new DateTime(2021, 6, 12, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 1,
                            MaxAvailableTickets = 500,
                            Name = "EK België-Rusland",
                            WebsiteUrl = "https://www.vooruit.be/nl/agenda/3837//EK_Belgie_Rusland_op_groot_scherm"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Uitzending EK wedstrijd tussen België en Denemarken, wees er tijdig bij want door corona zijn de plaatsen beperkt",
                            EventDate = new DateTime(2021, 6, 18, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 2,
                            MaxAvailableTickets = 500,
                            Name = "EK België-Denemarken"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Uitzending EK wedstrijd tussen België en Finland, wees er tijdig bij want door corona zijn de plaatsen beperkt",
                            EventDate = new DateTime(2021, 6, 21, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 3,
                            MaxAvailableTickets = 500,
                            Name = "EK België-Finland"
                        },
                        new
                        {
                            Id = 4,
                            BannerImgUrl = "https://www.vooruit.be/cms_files/system/images/img11483_174.jpg",
                            Description = "Wees er tijdig bij want door corona zijn de plaatsen beperkt",
                            EventId = 4,
                            MaxAvailableTickets = 50,
                            Name = "UITGESTELD: Terras Sessie: Joni Sheila",
                            WebsiteUrl = "https://www.vooruit.be/nl/agenda/3771//TERRAS_SESSIE_10_Joni_Sheila"
                        });
                });

            modelBuilder.Entity("YES.Server.Data.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfPurchase")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("TicketCustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("TicketCustomerId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfPurchase = new DateTime(2021, 6, 11, 10, 56, 38, 908, DateTimeKind.Local).AddTicks(8704),
                            EventId = 1,
                            TicketCustomerId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateOfPurchase = new DateTime(2021, 6, 11, 10, 56, 38, 915, DateTimeKind.Local).AddTicks(9838),
                            EventId = 1,
                            TicketCustomerId = 1
                        },
                        new
                        {
                            Id = 3,
                            DateOfPurchase = new DateTime(2021, 6, 11, 10, 56, 38, 915, DateTimeKind.Local).AddTicks(9955),
                            EventId = 1,
                            TicketCustomerId = 1
                        },
                        new
                        {
                            Id = 4,
                            DateOfPurchase = new DateTime(2021, 6, 11, 10, 56, 38, 915, DateTimeKind.Local).AddTicks(9961),
                            EventId = 1,
                            TicketCustomerId = 1
                        },
                        new
                        {
                            Id = 5,
                            DateOfPurchase = new DateTime(2021, 6, 11, 10, 56, 38, 915, DateTimeKind.Local).AddTicks(9964),
                            EventId = 1,
                            TicketCustomerId = 1
                        },
                        new
                        {
                            Id = 6,
                            DateOfPurchase = new DateTime(2021, 6, 11, 10, 56, 38, 915, DateTimeKind.Local).AddTicks(9967),
                            EventId = 1,
                            TicketCustomerId = 2
                        },
                        new
                        {
                            Id = 7,
                            DateOfPurchase = new DateTime(2021, 6, 11, 10, 56, 38, 915, DateTimeKind.Local).AddTicks(9970),
                            EventId = 1,
                            TicketCustomerId = 2
                        },
                        new
                        {
                            Id = 8,
                            DateOfPurchase = new DateTime(2021, 6, 11, 10, 56, 38, 915, DateTimeKind.Local).AddTicks(9974),
                            EventId = 1,
                            TicketCustomerId = 3
                        },
                        new
                        {
                            Id = 9,
                            DateOfPurchase = new DateTime(2021, 6, 11, 10, 56, 38, 915, DateTimeKind.Local).AddTicks(9977),
                            EventId = 1,
                            TicketCustomerId = 3
                        },
                        new
                        {
                            Id = 10,
                            DateOfPurchase = new DateTime(2021, 6, 11, 10, 56, 38, 915, DateTimeKind.Local).AddTicks(9980),
                            EventId = 1,
                            TicketCustomerId = 3
                        },
                        new
                        {
                            Id = 11,
                            DateOfPurchase = new DateTime(2021, 6, 11, 10, 56, 38, 915, DateTimeKind.Local).AddTicks(9983),
                            EventId = 1,
                            TicketCustomerId = 3
                        },
                        new
                        {
                            Id = 12,
                            DateOfPurchase = new DateTime(2021, 6, 11, 10, 56, 38, 915, DateTimeKind.Local).AddTicks(9986),
                            EventId = 1,
                            TicketCustomerId = 4
                        },
                        new
                        {
                            Id = 13,
                            DateOfPurchase = new DateTime(2021, 6, 11, 10, 56, 38, 915, DateTimeKind.Local).AddTicks(9989),
                            EventId = 1,
                            TicketCustomerId = 4
                        },
                        new
                        {
                            Id = 14,
                            DateOfPurchase = new DateTime(2021, 6, 11, 10, 56, 38, 915, DateTimeKind.Local).AddTicks(9992),
                            EventId = 1,
                            TicketCustomerId = 5
                        },
                        new
                        {
                            Id = 15,
                            DateOfPurchase = new DateTime(2021, 6, 11, 10, 56, 38, 915, DateTimeKind.Local).AddTicks(9997),
                            EventId = 1,
                            TicketCustomerId = 5
                        },
                        new
                        {
                            Id = 16,
                            DateOfPurchase = new DateTime(2021, 6, 11, 10, 56, 38, 916, DateTimeKind.Local).AddTicks(1),
                            EventId = 1,
                            TicketCustomerId = 5
                        });
                });

            modelBuilder.Entity("YES.Server.Data.Entities.TicketCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TicketCustomers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BankAccount = "BE68 5390 0754 7034",
                            Email = "kobe@mail.com",
                            FirstName = "Kobe",
                            LastName = "Delobelle",
                            PhoneNumber = "0473 288 888"
                        },
                        new
                        {
                            Id = 2,
                            BankAccount = "BE68 6990 5800 7574",
                            Email = "ward@mail.com",
                            FirstName = "Ward",
                            LastName = "Impe",
                            PhoneNumber = "0473 422 458"
                        },
                        new
                        {
                            Id = 3,
                            BankAccount = "BE60 5590 0994 7021",
                            Email = "Pieter@mail.com",
                            FirstName = "Pieter",
                            LastName = "Corp",
                            PhoneNumber = "0453 288 888"
                        },
                        new
                        {
                            Id = 4,
                            BankAccount = "BE70 5560 1278 7078",
                            Email = "Seba@mail.com",
                            FirstName = "Seba",
                            LastName = "Stiaan",
                            PhoneNumber = "0485 345 349"
                        },
                        new
                        {
                            Id = 5,
                            BankAccount = "BE77 7893 0824 7304",
                            Email = "Nick@mail.com",
                            FirstName = "Nick",
                            LastName = "Angularlover",
                            PhoneNumber = "0478 365 852"
                        },
                        new
                        {
                            Id = 6,
                            BankAccount = "BE41 7563 7835 0157",
                            Email = "Dries@mail.com",
                            FirstName = "Dries",
                            LastName = "Maes",
                            PhoneNumber = "0432 457 896"
                        },
                        new
                        {
                            Id = 7,
                            BankAccount = "BE96 4278 6420 5496",
                            Email = "Olivia@mail.com",
                            FirstName = "Olivia",
                            LastName = "Goossens",
                            PhoneNumber = "0478 365 852"
                        },
                        new
                        {
                            Id = 8,
                            BankAccount = "BE77 1046 8642 5676",
                            Email = "Mila@mail.com",
                            FirstName = "Mila",
                            LastName = "Vandevoorde",
                            PhoneNumber = "0485 377 352"
                        },
                        new
                        {
                            Id = 9,
                            BankAccount = "BE86 7831 5701 5684",
                            Email = "Alice@mail.com",
                            FirstName = "Alice",
                            LastName = "Mcgregor",
                            PhoneNumber = "0478 785 125"
                        },
                        new
                        {
                            Id = 10,
                            BankAccount = "BE68 4578 3025 7304",
                            Email = "Louise@mail.com",
                            FirstName = "Louise",
                            LastName = "Degroote",
                            PhoneNumber = "0477 765 782"
                        },
                        new
                        {
                            Id = 11,
                            BankAccount = "BE89 4785 2015 3065",
                            Email = "Mohamed@mail.com",
                            FirstName = "Mohamed",
                            LastName = "Yilmaz",
                            PhoneNumber = "0472 752 785"
                        },
                        new
                        {
                            Id = 12,
                            BankAccount = "BE58 7520 4778 8214",
                            Email = "Emir@mail.com",
                            FirstName = "Emir",
                            LastName = "Öztürk",
                            PhoneNumber = "0473 478 795"
                        },
                        new
                        {
                            Id = 13,
                            BankAccount = "BE72 0145 7857 6375",
                            Email = "Kurt@mail.com",
                            FirstName = "Kurt",
                            LastName = "Debolle",
                            PhoneNumber = "0478 140 349"
                        },
                        new
                        {
                            Id = 14,
                            BankAccount = "BE86 4576 0445 4873",
                            Email = "Arthur@mail.com",
                            FirstName = "Arthur",
                            LastName = "Vangeest",
                            PhoneNumber = "0490 785 457"
                        },
                        new
                        {
                            Id = 15,
                            BankAccount = "BE69 2467 0468 0478",
                            Email = "Noah@mail.com",
                            FirstName = "Noah",
                            LastName = "Vanarke",
                            PhoneNumber = "0475 850 852"
                        },
                        new
                        {
                            Id = 16,
                            BankAccount = "BE88 4785 9785 9620",
                            Email = "Victor@mail.com",
                            FirstName = "Victor",
                            LastName = "De Putte",
                            PhoneNumber = "0488 754 752"
                        });
                });

            modelBuilder.Entity("YES.Server.Data.Entities.TicketPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId")
                        .IsUnique();

                    b.ToTable("TicketPrices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 1
                        },
                        new
                        {
                            Id = 2,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 2
                        },
                        new
                        {
                            Id = 3,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 3
                        },
                        new
                        {
                            Id = 4,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 4
                        },
                        new
                        {
                            Id = 5,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 5
                        },
                        new
                        {
                            Id = 6,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 6
                        },
                        new
                        {
                            Id = 7,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 7
                        },
                        new
                        {
                            Id = 8,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 8
                        },
                        new
                        {
                            Id = 9,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 9
                        },
                        new
                        {
                            Id = 10,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 10
                        },
                        new
                        {
                            Id = 11,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 11
                        },
                        new
                        {
                            Id = 12,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 12
                        },
                        new
                        {
                            Id = 13,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 13
                        },
                        new
                        {
                            Id = 14,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 14
                        },
                        new
                        {
                            Id = 15,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 15
                        },
                        new
                        {
                            Id = 16,
                            Category = "zitplaats",
                            Price = 1,
                            TicketId = 16
                        });
                });

            modelBuilder.Entity("YES.Server.Data.Entities.TicketProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TicketProviders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BankAccount = "BE78 3590 0754 7674",
                            Email = "info@vooruit.be",
                            NameProvider = "Vooruit",
                            PhoneNumber = "09 267 28 20"
                        },
                        new
                        {
                            Id = 2,
                            BankAccount = "BE78 7854 3585 7820",
                            Email = "info@tomorrowland.be",
                            NameProvider = "WAREONE.world bvba",
                            PhoneNumber = "09 147 27 78"
                        },
                        new
                        {
                            Id = 3,
                            BankAccount = "BE78 7768 3578 1220",
                            Email = "info@rockwerchter.be",
                            NameProvider = "Live Nation Festivals NV",
                            PhoneNumber = "09 754 87 78"
                        },
                        new
                        {
                            Id = 4,
                            BankAccount = "BE76 5455 8725 7824",
                            Email = "info@couleurcafe.be",
                            NameProvider = "Couleur Cafe",
                            PhoneNumber = "09 785 24 86"
                        },
                        new
                        {
                            Id = 5,
                            BankAccount = "BE34 8792 4687 2565",
                            Email = "info@pukkelpop.be",
                            NameProvider = "Chokri Mahassine",
                            PhoneNumber = "09 765 78 86"
                        },
                        new
                        {
                            Id = 6,
                            BankAccount = "BE55 7865 7874 1237",
                            Email = "info@extremaoutdoor.be",
                            NameProvider = "Extrema",
                            PhoneNumber = "09 485 35 41"
                        },
                        new
                        {
                            Id = 7,
                            BankAccount = "BE55 7865 7874 1237",
                            Email = "info@sportpaleisgroup.be",
                            NameProvider = "Sportpaleis Group NV",
                            PhoneNumber = "09 879 87 74"
                        },
                        new
                        {
                            Id = 8,
                            BankAccount = "BE55 7865 7874 1237",
                            Email = "info@elixir.be",
                            NameProvider = "eLiXir",
                            PhoneNumber = "09 782 71 42"
                        },
                        new
                        {
                            Id = 9,
                            BankAccount = "BE55 7865 7874 1237",
                            Email = "info@trix.be",
                            NameProvider = "Team Trix",
                            PhoneNumber = "09 456 79 17"
                        });
                });

            modelBuilder.Entity("YES.Server.Data.Entities.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Venues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 1110,
                            Name = "Kunstencentrum Vooruit"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 2000,
                            Name = "Capitole Gent"
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 1500,
                            Name = "Trix"
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 200,
                            Name = "eLiXir Dance & Night Club"
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 23359,
                            Name = "Sportpaleis"
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 200000,
                            Name = "Tomorrowland"
                        },
                        new
                        {
                            Id = 7,
                            Capacity = 100000,
                            Name = "Rock Werchter"
                        },
                        new
                        {
                            Id = 8,
                            Capacity = 60000,
                            Name = "Couleur Café"
                        },
                        new
                        {
                            Id = 9,
                            Capacity = 100000,
                            Name = "Pukkelpop"
                        },
                        new
                        {
                            Id = 10,
                            Capacity = 60000,
                            Name = "Extrema Outdoor"
                        });
                });

            modelBuilder.Entity("YES.Server.Data.Entities.Address", b =>
                {
                    b.HasOne("YES.Server.Data.Entities.TicketCustomer", "TicketCustomer")
                        .WithOne("Address")
                        .HasForeignKey("YES.Server.Data.Entities.Address", "TicketCustomerId");

                    b.HasOne("YES.Server.Data.Entities.TicketProvider", "TicketProvider")
                        .WithOne("Address")
                        .HasForeignKey("YES.Server.Data.Entities.Address", "TicketProviderId");

                    b.HasOne("YES.Server.Data.Entities.Venue", "Venue")
                        .WithOne("Address")
                        .HasForeignKey("YES.Server.Data.Entities.Address", "VenueId");

                    b.Navigation("TicketCustomer");

                    b.Navigation("TicketProvider");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("YES.Server.Data.Entities.Event", b =>
                {
                    b.HasOne("YES.Server.Data.Entities.TicketProvider", "TicketProvider")
                        .WithMany("Events")
                        .HasForeignKey("TicketProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YES.Server.Data.Entities.Venue", "Venue")
                        .WithMany("Events")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TicketProvider");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("YES.Server.Data.Entities.EventInfo", b =>
                {
                    b.HasOne("YES.Server.Data.Entities.Event", null)
                        .WithOne("EventInfo")
                        .HasForeignKey("YES.Server.Data.Entities.EventInfo", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YES.Server.Data.Entities.Ticket", b =>
                {
                    b.HasOne("YES.Server.Data.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YES.Server.Data.Entities.TicketCustomer", "TicketCustomer")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("TicketCustomer");
                });

            modelBuilder.Entity("YES.Server.Data.Entities.TicketPrice", b =>
                {
                    b.HasOne("YES.Server.Data.Entities.Ticket", "Ticket")
                        .WithOne("TicketPrice")
                        .HasForeignKey("YES.Server.Data.Entities.TicketPrice", "TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("YES.Server.Data.Entities.Event", b =>
                {
                    b.Navigation("EventInfo");
                });

            modelBuilder.Entity("YES.Server.Data.Entities.Ticket", b =>
                {
                    b.Navigation("TicketPrice");
                });

            modelBuilder.Entity("YES.Server.Data.Entities.TicketCustomer", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("YES.Server.Data.Entities.TicketProvider", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("YES.Server.Data.Entities.Venue", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
