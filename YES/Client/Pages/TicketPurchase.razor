@page "/TicketPurchase/{Id:int}"
@inject IEventService _eventService
@inject ICustomerService _customerService
@inject ITicketService _ticketService

<div class="page-background">

    @if (Event != null)
    {
        
    <section>
        <h3 class="mb-5">Tickets for @Event.EventInfo.Name @Event.EventInfo.EventDate</h3>

        <div class="row mb-3">
            <div class="col">
                <h5>
                    Type
                </h5>
            </div>
            <div class="col">
                <h5>
                    Price
                </h5>
            </div>
            <div class="col">
                <h5>
                    Available Tickets
                </h5>
            </div>
            <div class="col">
                <h5>
                    Quantity
                </h5>
            </div>
        </div>
        <hr />
        <div>
            @foreach (var priceCategory in Event.TicketCategories)
            {
            <div class="row">
                <div class="col">
                    @priceCategory.Name
                </div>
                <div class="col">
                    € @priceCategory.Price
                </div>
                <div class="col">
                    @priceCategory.AvailableAmount
                </div>
                <div class="col">
                    <button type="button"
                            class="btn btn-outline-warning btn-addremove"
                            @onclick="() => AddTicketToPurchasingList(priceCategory)">
                        +
                    </button>
                    <button type="button"
                            class="btn btn-outline-danger btn-addremove"
                            @onclick="() => ClearItemFromPurchaseList(TicketsPurchasingList.SingleOrDefault(x => x.Category == priceCategory.Name))">
                        -
                    </button>
                </div>
            </div>
                <hr />
            }
        </div>


        @if (TicketsPurchasingList.Any())
        {

            <h5>Your current purchase:</h5>

            @foreach (var ticket in TicketsPurchasingList)
            {
                <div class="row">
                    <div class="col">
                        @ticket.Category
                    </div>
                    <div class="col">
                        @ticket.Price
                    </div>
                    <div class="col">
                        #@ticket.Amount
                    </div>
                    <div class="col">
                        
                    </div>
                </div>
            }


    <div class="row mt-4">
        <div class="col">
            <h4 class="mt-3"> Total Price: €@Math.Round(TotalPrice, 2)</h4>
        </div>
        <div class="col">
            <h4 class="mt-3"> Total Tickets: @AmountOfTicketsToPurchase</h4>
        </div>
        <div class="col">
            <button type="button" class="btn btn-warning mt-3" @onclick="() => PurchaseTickets()"> Order Tickets! </button>
            <button type="button" class="btn btn-outline-danger mt-3" @onclick="() => ClearPurchaseList()">Cancel</button>

        </div>
    </div>

            @if (PurchaseSuccesful == true)
            {
                <div class="mt-5 alert alert-warning">
                    @Customer.FirstName succesfully ordered @TicketsPurchasingList.Count() ticket(s) for €@Math.Round(TotalPrice, 2) !
                </div>
            }

        }
    </section>            
            
        }
        else
        {
            <section>
                <p>No events found.</p>
            </section>
        }

</div>

@code {
    [Parameter]
    public int Id { get; set; }

    public EventDto Event { get; set; }

    public double TotalPrice { get; set; }

    public int AmountOfTicketsToPurchase { get; set; }

    public bool PurchaseSuccesful { get; set; } = false;

    public List<TicketPurchaseDto> TicketsPurchasingList { get; set; } = new();

    public CustomerWithTicketsDto Customer { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Event = await _eventService.GetEventByIdAsync(Id);
        Customer = await _customerService.GetCustomerByIdAsync(1);
        PurchaseSuccesful = false;
    }

    private void AddTicketToPurchasingList(TicketCategoryDto ticketCategory)
    {
        PurchaseSuccesful = false;

        if (TicketsPurchasingList.Any())
        {
            bool itemFound = false;
            foreach (var item in TicketsPurchasingList)
            {
                if (ticketCategory.Name == item.Category)
                {
                    item.Amount++;
                    itemFound = true;
                }
            }

            if (!itemFound)
            {
                var newTicket = CreateTicket(ticketCategory);
                TicketsPurchasingList.Add(newTicket);
            }
        }
        else
        {
            var newTicket = CreateTicket(ticketCategory);
            TicketsPurchasingList.Add(newTicket);
        }

        TotalPrice = CalculateTotalPrice();
        AmountOfTicketsToPurchase = CountTotalTickets();

    }

    private void ClearItemFromPurchaseList(TicketPurchaseDto ticket)
    {
        if (ticket.Amount > 1)
        {
            ticket.Amount--;
        }
        else if(ticket.Amount == 1)
        {
            TicketsPurchasingList.Remove(ticket);
        }

        TotalPrice = CalculateTotalPrice();
        AmountOfTicketsToPurchase = CountTotalTickets();
    }

    private void ClearPurchaseList()
    {
        TotalPrice = 0;
        TicketsPurchasingList.Clear();
        PurchaseSuccesful = false;
    }

    private void PurchaseTickets()
    {

        //_ticketService.AddNewTicketsAsync(TicketsPurchasingList);

        PurchaseSuccesful = true;

    }

    private TicketPurchaseDto CreateTicket(TicketCategoryDto categoryDto)
    {
        return  new TicketPurchaseDto
        {
            TicketCustomerId = Customer.Id,
            EventId = Event.Id,
            Category = categoryDto.Name,
            Price = categoryDto.Price,
            Amount = 1

        };
    }

    private double CalculateTotalPrice()
    {
        double price = 0;
        foreach (var item in TicketsPurchasingList)
        {
            price += (item.Price * item.Amount);
        }

        return price;
    }

    private int CountTotalTickets()
    {
        int amount = 0;
        foreach (var item in TicketsPurchasingList)
        {
            amount += item.Amount;
        }

        return amount;
    }

}
