@page "/TicketPurchase/{Id:int}"
@inject IEventService _eventService
@inject ICustomerService _customerService
@inject ITicketService _ticketService

<div class="page-background">

    @if (Event != null)
    {
        
    <section>
        <h3 class="mb-5">Tickets for @Event.EventInfo.Name</h3>

        <div class="row mb-3">
            <div class="col">
                <h5>
                    Type
                </h5>
            </div>
            <div class="col">
                <h5>
                    Price
                </h5>
            </div>
            <div class="col">
                <h5>
                    Quantity
                </h5>
            </div>
        </div>
        <hr />
        <div>
            @foreach (var priceCategory in Event.TicketCategories)
            {
                <div class="row">
                    <div class="col">
                        @priceCategory.Name
                    </div>
                    <div class="col">
                        € @priceCategory.Price
                    </div>
                    <div class="col">
                        <button type="button" class="btn btn-outline-warning" @onclick="() => AddTicketToPurchasingList(priceCategory)">+</button>
                    </div>
                </div>
                <hr />
            }
        </div>


        @if (TicketsPurchasingList != null)
        {

            <h5>Your current purchase:</h5>

            @foreach (var ticket in TicketsPurchasingList)
            {
                <div class="row">
                    <div class="col">
                        @ticket.Name
                    </div>
                    <div class="col">
                        @ticket.Price
                    </div>
                    <div class="col">
                        <button type="button" class="btn btn-outline-danger mt-3" @onclick="() => ClearItemFromPurchaseList(ticket)">X</button>
                    </div>
                </div>
            }

            <div class="row mt-4">
                <div class="col">
                    <h3 class="mt-3"> Total Price: € @Math.Round(TotalPrice, 2)</h3>
                </div>
                <div class="col">
                    <button type="button" class="btn btn-warning mt-3" @onclick="() => PurchaseTickets()"> Order Tickets! </button>
                    <button type="button" class="btn btn-outline-danger mt-3" @onclick="() => ClearPurchaseList()">Cancel</button>

                </div>
            </div>



            @if (PurchaseSuccesful == true)
            {
                <div class="mt-5 alert alert-warning">
                    @Customer.FirstName succesfully ordered @TicketsPurchasingList.Count() ticket(s) for €@Math.Round(TotalPrice, 2) !
                </div>
            }

        }
    </section>            
            
        }
        else
        {
            <section>
                <p>No events found.</p>
            </section>
        }



</div>

@code {
        [Parameter]
        public int Id { get; set; }

    public EventDto Event { get; set; }

    public double TotalPrice { get; set; }

    public bool PurchaseSuccesful { get; set; } = false;

    public List<TicketCategoryDto> TicketsPurchasingList { get; set; }

    public CustomerWithTicketsDto Customer { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Event = await _eventService.GetEventByIdAsync(Id);
        Customer = await _customerService.GetCustomerByIdAsync(1);
        PurchaseSuccesful = false;
    }

    private void AddTicketToPurchasingList(TicketCategoryDto ticket)
    {
        PurchaseSuccesful = false;
        if (TicketsPurchasingList == null)
        {
            TicketsPurchasingList = new List<TicketCategoryDto>();
        }
        TicketsPurchasingList.Add(ticket);
        TotalPrice += ticket.Price;
    }

    private void ClearItemFromPurchaseList(TicketCategoryDto ticket)
    {
        TotalPrice -= ticket.Price;
        TicketsPurchasingList.Remove(ticket);
    }

    private void ClearPurchaseList()
    {
        TotalPrice = 0;
        TicketsPurchasingList.Clear();
        PurchaseSuccesful = false;
    }

    private void PurchaseTickets()
    {
        var tickets = GenerateTickets();
        //if (GenerateTickets().Any())
        //{
        //    //TODO: service method to send GenerateTickets() to API
        //    _ticketService.AddNewTicketsAsync(GenerateTickets());

        PurchaseSuccesful = true;
        //}

    }

    private List<TicketPurchaseDto> GenerateTickets()
    {
        var ticketList = new List<TicketPurchaseDto>();

        foreach (var ticketCategory in TicketsPurchasingList)
        {
            foreach (var ticketItem in ticketList)
            {
                if (ticketCategory.Name == ticketItem.Category)
                {
                    ticketItem.Amount++;
                }
                else
                {
                    var ticket = new TicketPurchaseDto
                    {
                        TicketCustomerId = Customer.Id,
                        EventId = Event.Id,
                        Category = ticketCategory.Name,
                        Price = ticketCategory.Price,
                        Amount = 1

                    };
                    ticketList.Add(ticket);
                }
            }
        }

        return ticketList;
    }
}
