@page "/CreateEvent"
@page "/CreateEvent/{Id:int}"
@inject IProviderService providerService
@inject IEventService eventService
@inject IAccountService accountService
@inject ITicketService ticketService
@inject IJSRuntime JSRuntime

<div class="page-bg">
    <section>
        @if (GlobalVariables.LoggedInUser?.Role == Roles.TicketProvider)
        {
            @if (Id > 0)
            {
                <h3 class="mb-4 d-flex justify-content-center border-bottom pb-4">Edit Event</h3>
            }
            else
            {
                <h3 class="mb-4 d-flex justify-content-center border-bottom pb-4">Create Event</h3>
            }



            @if (Event != null)
            {
                <CreateEventForm Event="Event" OnSubmitEvent="SubmitEvent"></CreateEventForm>

                @if (CreateEventSuccessful)
                {
                    <div class="alert alert-warning my-4">
                        @AlertMessage
                    </div>
                }
                @if (CreateEventFailed)
                {
                    <div class="alert alert-danger my-4">
                        @AlertMessage
                    </div>
                }

            }
            else
            {
                @if (EventIdDoesntMatchProviderId)
                {
                    <div class="alert alert-warning">
                        Please request a valid Event to edit.
                    </div>
                }
                else
                {
                    <p>No event found.</p>

                }
            }
        }
        else
        {
            <div class="">
                Access Denied.
            </div>
        }
    </section>
</div>


@code {
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public EventDto Event { get; set; }

    public TicketProviderDto TicketProvider { get; set; }

    /* Bools */
    public bool CreateEventSuccessful { get; set; }
    public bool CreateEventFailed { get; set; }
    public bool EventIdDoesntMatchProviderId { get; set; }

    public string AlertMessage { get; set; }

    protected async override Task OnInitializedAsync()
    {
        ResetBools();

        if (GlobalVariables.LoggedInUser != null)
        {
            TicketProvider = await providerService.GetProviderByIdAsync(GlobalVariables.LoggedInUser.Id);
        }

        if (Id > 0)
        {
            var result = await eventService.GetEventByIdAsync(Id);
            if (result.TicketProvider.Id == TicketProvider.Id)
            {
                Event = result;
            }
            else
            {
                EventIdDoesntMatchProviderId = true;
            }

        }
        else if (Event == null)
        {
            InitializeEvent();
        }

    }

    private void ResetBools()
    {
        EventIdDoesntMatchProviderId = false;
        CreateEventSuccessful = false;
        CreateEventFailed = false;
    }

    private async Task SubmitEvent()
    {
        HttpResponseMessage response;

        if (Id > 0)
        {
            response = await eventService.UpdateEventAsync(Event);
        }
        else
        {
            response = await eventService.CreateNewEventAsync(Event);
        }
        if (response.IsSuccessStatusCode)
        {
            CreateEventSuccessful = true;
            AlertMessage = await response.Content.ReadAsStringAsync();
        }
        else
        {
            CreateEventFailed = true;
            AlertMessage = await response.Content.ReadAsStringAsync();
        }
    }

    private void InitializeEvent()
    {
        Event = new EventDto
        {
            EventInfo = new EventInfoDto { EventDate = DateTime.Now },
            TicketProvider = this.TicketProvider,
            TicketCategories = new List<TicketCategoryDto>(),
            Venue = new VenueDto
            {
                Address = new()
            },
            Status = Status.Default.ToString()
        };
    }
}
