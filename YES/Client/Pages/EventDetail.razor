@page "/EventDetail/{Id:int}"
@inject IEventService _eventService
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject ICustomerService _customerService

<div class="page-bg">
    @if (Event?.Id > 0)
    {

        <div class="py-5 banner-wrapper">
            <div class="banner" style="background-image: url(@Event.EventInfo.BannerImgUrl); filter: blur(8px); -webkit-filter: blur(8px);">
            </div>
            <div class="mt-5 banner2" style="background-image: url(@Event.EventInfo.BannerImgUrl">
                <h3>@Event.EventInfo.Name</h3>
            </div>
        </div>

        <Alert Color="Color.Info" Class="alert-position" @bind-Visible="@IsNotLoggedIn">
            <AlertMessage>
                 Please login to buy tickets.
             </AlertMessage>
        </Alert>

        <section>
            <h5 class="event-date-line event-date">
                @if (Event.EventInfo.EventDate > DateTime.MinValue)
                {
                    @Event.EventInfo.EventDate.ToLongDateString() }
                else
                {
                    @:To Be Announced
                }
                <EventStatus Event="@Event"
                             eventStatus="@EventStatus"/>

            </h5>

            <div class="row">
                <div class="col-xl-4">
                    <p>@Event.EventInfo.Description</p>
                    <p>Tickets left: @CountTotalTicketsLeft() </p>
                </div>
                <div class="col-xl-3">
                    <h5>@Event.Venue.Name</h5>
                    <p>@Event.Venue.Address.Street @Event.Venue.Address.StreetNumber </p>
                    <p>@Event.Venue.Address.PostalCode @Event.Venue.Address.City </p>
                    <p>@Event.Venue.Address.Country</p>
                </div>
                <div class="col-xl-3">
                    <h5>@Event.TicketProvider.NameProvider</h5>
                    <p>@Event.TicketProvider.Email </p>
                    <p>@Event.TicketProvider.PhoneNumber</p>
                </div>
                <div class="col-xl-2">
                    @if (Event.Status != "Cancelled")
                    {
                        @if (Event.Status == "SoldOut")
                        {
                            <a class="btn btn-warning float-end btn-disabled">Tickets</a> }
                        else
                        {
                            <button class="btn btn-warning float-end" @onclick="@CheckIfLoggedIn">Tickets</button>
                        }
                    }

                    <a href="@Event.EventInfo.WebsiteUrl" target="_blank" class="btn btn-secondary float-end">Website</a>
                </div>
            </div>
        </section>
  
  
  
        <Modal @ref="_modalRef">
            <ModalContent Centered="true" Class="bg-dark text-light">
                <ModalHeader>
                    <ModalTitle>@Event.EventInfo.Name <br/> @Event.EventInfo.EventDate</ModalTitle>
                    <CloseButton Class="close-btn btn"/>
                </ModalHeader>
                <ModalBody>
                    <BuyTicket Customer="@Customer"
                               Event="@Event"
                               Id="@Id"
                               modalRef="@_modalRef"/>
                </ModalBody>
            </ModalContent>
        </Modal>
        

    }
    else
    {
        <p>No Event found</p>
    }
     <div id='map' style='width: 100%; height: 400px;'></div>

</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private EventDto Event { get; set; }
    private string EventStatus { get; set; }
    private CustomerWithTicketsDto Customer { get; set; }
    private bool IsNotLoggedIn { get; set; }

    // reference to the modal component
    private Modal _modalRef;

    protected override async Task OnInitializedAsync()
    {
        Event = await _eventService.GetEventByIdAsync(Id);
       
        if (GlobalVariables.LoggedInUser != null && GlobalVariables.LoggedInUser.Role==Roles.TicketCustomer)
        {
            Customer = await _customerService.GetCustomerByIdAsync(GlobalVariables.LoggedInUser.Id);
        }

        if (Event != null)
        {
            await JSRuntime.InvokeVoidAsync("initialize", Event.Venue.Address);
        }
    }

    private int CountTotalTicketsLeft()
    {
        return Event.TicketCategories.Sum(category => category.AvailableAmount);
    }

    private async Task CheckIfLoggedIn()
    {
        if (GlobalVariables.LoggedInUser != null)
        {
            Customer = await _customerService.GetCustomerByIdAsync(GlobalVariables.LoggedInUser.Id);
            _modalRef.Show();
        }
        else
        {
            await LoginAlert();
        }
    }

    private async Task LoginAlert()
    {
        IsNotLoggedIn = true;
        await Task.Delay(2000);
        IsNotLoggedIn = false;
    }
}
