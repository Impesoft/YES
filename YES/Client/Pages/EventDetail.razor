@page "/EventDetail/{Id:int}"
@inject IEventService _eventService
@inject ICustomerService _customerService


<div class="page-bg">
    @if (Event != null)
    {

        <div class="py-5 banner-wrapper">
            <div class="banner" style="background-image: url(@Event.EventInfo.BannerImgUrl); filter: blur(8px); -webkit-filter: blur(8px);">
            </div>
            <div class="mt-5 banner2" style="background-image: url(@Event.EventInfo.BannerImgUrl">
                <h3>@Event.EventInfo.Name</h3>
            </div>
        </div>
        
        <section>
            <h5 class="event-date-line event-date">
                @if (Event.EventInfo.EventDate > DateTime.MinValue)
                {
                    @Event.EventInfo.EventDate.ToLongDateString()
                }
                else
                {
                    @:To Be Announced
                }
                <EventStatus Event="@Event"
                             eventStatus="@eventStatus"/>
            </h5>
            
            <div class="row">
                <div class="col-xl-4">
                    <p>@Event.EventInfo.Description</p>
                     <p>Tickets left: @CountTotalTicketsLeft() </p>
                </div>
                <div class="col-xl-3">
                    <h5>@Event.Venue.Name</h5>
                    <p>@Event.Venue.Address.Street @Event.Venue.Address.StreetNumber </p>
                    <p>@Event.Venue.Address.PostalCode @Event.Venue.Address.City </p>
                    <p>@Event.Venue.Address.Country</p>
                </div>
                <div class="col-xl-3">
                    <h5>@Event.TicketProvider.NameProvider</h5>
                    <p>@Event.TicketProvider.Email </p>
                    <p>@Event.TicketProvider.PhoneNumber</p>
                </div>
                <div class="col-xl-2">
                    @if (Event.Status != "Cancelled")
                    {
                        @if (Event.Status == "SoldOut")
                        {
                            <a class="btn btn-warning float-end btn-disabled">Tickets</a>
                        }
                        else
                        {
                            @*<a href="/TicketPurchase/@Event.Id" class="btn btn-warning float-end">Tickets</a>*@
                            <button class="btn btn-warning float-end" @onclick="@ShowModal">Tickets</button>
                        }
                    }
                    @* <Button Clicked="@ShowModal" class="btn btn-warning float-end btn-modal">Tickets</Button> *@
                    
                    <a href="@Event.EventInfo.WebsiteUrl" target="_blank" class="btn btn-secondary float-end">Website</a>
                    
                </div>
            </div>
        </section>
        
        <Modal @ref="modalRef">
            <ModalContent Centered="true" Class="bg-dark text-light">
                <ModalHeader>
                    <ModalTitle>@Event.EventInfo.Name <br/> @Event.EventInfo.EventDate</ModalTitle>
                    <CloseButton Class="close-btn btn" />
                </ModalHeader>
                <ModalBody>
                    <BuyTicket LoggedInUserId="@LoggedInUserId"
                               Customer="@Customer"
                               Event="@Event"
                               Id="@Id"
                               modalRef="@modalRef"
                               />
                </ModalBody>
            </ModalContent>
        </Modal>
    }
    else
    {
        <p>No Event found</p>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    public EventDto Event { get; set; }
    private string eventStatus { get; set; }
    public int LoggedInUserId { get; set; }
    public CustomerWithTicketsDto Customer { get; set; }
    
    // reference to the modal component
    private Modal modalRef;

    private void ShowModal()
    {
        modalRef.Show();
    }

    private void HideModal()
    {
        modalRef.Hide();
    }

    protected override async Task OnInitializedAsync()
    {
        LoggedInUserId = _customerService.GetLoggedInUser();
        Event = await _eventService.GetEventByIdAsync(Id);
        Customer = await _customerService.GetCustomerByIdAsync(LoggedInUserId);
    }

    private int CountTotalTicketsLeft()
    {
        int totalTickets = 0;
        foreach (var category in Event.TicketCategories)
        {
            totalTickets += category.AvailableAmount;
        }

        return totalTickets;
    }

}
