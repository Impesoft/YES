@page "/login"
@using Newtonsoft.Json;
@inject IJSRuntime JSRuntime  

<div class="page-bg">
    <section>
        <h3>Log In</h3>
        <form >
            <div>
                <input class="form-control mt-1" placeholder="Email" type="email" @bind="LoginInfo.Email"/>
            </div>
            <div>
                <input class="form-control mt-1" placeholder="Password" type="password" @bind="LoginInfo.Password"/>
            </div>
            <button class="btn btn-outline-success mt-1" type="button" @onclick="LogIn">Log In</button>
        </form>

        <div>
            No account yet? Register <a href="">here</a>.
        </div>

        

        <hr />
        <div class="mt-5">
            logging in user @LoginTest;...
        </div>

           
        @if (Customer != null)
        {
            <div>
                Currently logged in user from backend is: @Customer.Email
            </div>
        }
        

    </section>
</div>


@code {


    public string LoginTest { get; set; }

    private UserTokenDto Customer { get; set; }

    public LoginDto LoginInfo { get; set; }

    [Inject]
    private IAccountService _accountService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        LoginInfo = new();
       var JsonUser =  await JSRuntime.InvokeAsync<string>("localStorage.getItem", "user");
        Customer = JsonConvert.DeserializeObject<UserTokenDto>(JsonUser);
        if (Customer == null)
        {
        }
        //  currentInputValue = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "name");
    }

    private async Task LogIn()
    {
        await _accountService.LogIn(LoginInfo);
        Customer = _accountService.GetLoggedInUser();           

        LoginTest = LoginInfo.Email + " " + LoginInfo.Password;
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "user", _accountService.LoggedInUserJson);
    }
    // delete => await JSRuntime.InvokeAsync<string>("localStorage.removeItem", "name");
}}
