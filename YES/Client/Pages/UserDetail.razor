@page "/CustomerDetail"
@inject ICustomerService customerService
@inject IAccountService accountService
@inject IJSRuntime JSRuntime

<div class="page-bg">
    <section>
        @if (Customer != null)
        {
            <h3 class="mb-4">Customer Form</h3>
            <div class="mb-4">                
                    <CustomerForm Customer="Customer" OnSubmit="UpdateCustomer"></CustomerForm>                
            </div>

            @if (EditSuccesful == true)
            {
                <div class="mt-5 alert alert-warning">
                    @Customer.FirstName succesfully edited.
                </div>
            }


            <hr />
            <h3 class="mb-3">Ticket List</h3>
            @if (Tickets != null)
            {
                <div class="row mb-4 ticket-overview-header">
                    <div class="col">
                        Purchased On
                    </div>
                    <div class="col">
                        Event Date
                    </div>
                    <div class="col">
                        Category
                    </div>
                    <div class="col">
                        Price
                    </div>

                    <div class="col">
                        Event Name
                    </div>
                    <div class="col">
                        Event Location
                    </div>

                </div>
                @foreach (var ticket in Customer.Tickets)
                {
                    <div class="row ticket-item">
                        <TicketOverview Ticket="ticket"></TicketOverview>
                    </div>

                }

            }
        }
        else
        {
            <p> No Customer Found</p>
        }

    </section>


</div>


@code {
        [Parameter]
        public CustomerWithTicketsDto Customer { get; set; }

        public List<TicketDto> Tickets { get; set; }

        public bool EditSuccesful { get; set; }

        protected async override Task OnInitializedAsync()
        {
            EditSuccesful = false;

            var JsonUser = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "user");
            var loggedInUser = JsonConvert.DeserializeObject<UserTokenDto>(JsonUser);

            Customer = await customerService.GetCustomerByIdAsync(loggedInUser.Id);

            TurnNullFieldsToEmptyString();

            if (Customer.Tickets.Any())
            {
                Tickets = Customer.Tickets.ToList();
            }
        }

        private async Task GetUserWithId(int id)
        {
            EditSuccesful = false;
            Customer = await customerService.GetCustomerByIdAsync(id);
        }

        private async Task UpdateCustomer()
        {
            EditSuccesful = true;
            await customerService.UpdateCustomer(Customer);
        }


        private void TurnNullFieldsToEmptyString()
        {
            if (Customer.FirstName == null)     Customer.FirstName = "";
            if (Customer.LastName == null)      Customer.LastName = "";
            if (Customer.Email == null)         Customer.Email = "";
            if (Customer.BankAccount == null)   Customer.BankAccount = "";
            if (Customer.PhoneNumber == null)   Customer.PhoneNumber = "";
            if (Customer.Address == null)
            {
                Customer.Address =  new AddressDto
                {
                    Id = 0,
                    City = "",
                    Country = "",
                    PostalCode = "",
                    Street ="",
                    StreetNumber=""
                };
            }
        }

}
