@page "/CustomerDetail"
@inject ICustomerService customerService
@inject IAccountService accountService
@inject IProviderService providerService 
@inject ITicketService ticketService
@inject IJSRuntime JSRuntime

<div class="page-bg">
    <section>
        @if (Customer != null)
        {
            <h3 class="mb-4">Customer Details</h3>
            <div class="mb-4">
                <CustomerForm Customer="Customer" OnSubmit="UpdateCustomer"></CustomerForm>
            </div>

            @if (EditSuccessful == true)
            {
                <div class="mt-5 alert alert-warning">
                    @Customer.FirstName succesfully edited.
                </div>
            }


            <hr />
            <div class="row mb-3">
                <h3 class=" col-lg-10">Ticket List</h3>

                <button class="btn btn-outline-danger col-lg-2" @onclick="CancelTickets">Cancel Tickets</button>
            </div>

            @if (CancelSuccessful == true)
            {
                <div class="my-5 alert alert-danger">
                    @TicketsToCancelById.Count() Ticket(s) succesfully cancelled.
                </div>
            }
            @if (Tickets != null)
            {
                <div class="row mb-4 ticket-overview-header">
                    <div class="col" @onclick="() => SortTicketList(1)" >
                        Purchased On
                    </div>
                    <div class="col" @onclick="() => SortTicketList(2)">
                        Event Date
                    </div>
                    <div class="col" @onclick="() => SortTicketList(3)">
                        Category
                    </div>
                    <div class="col" @onclick="() => SortTicketList(4)">
                        Price
                    </div>
                    <div class="col" @onclick="() => SortTicketList(5)">
                        Event Name
                    </div>
                    <div class="col" @onclick="() => SortTicketList(6)">
                        Event Location
                    </div>
                    <div class="col">
                        To Be Cancelled
                    </div>

                </div>
                @foreach (var ticket in Tickets)
                {
                    <div class="row ticket-item">
                        <TicketOverview Ticket="ticket" OnChange="() => AddTicketToCancelList(ticket.Id)"></TicketOverview>
                    </div>
                                        
                }

            }
        }
        else
        {
            <p> No Customer Found</p>
        }

    </section>


</div>


@code {
    [Parameter]
    public CustomerWithTicketsDto Customer { get; set; }


    public List<TicketDto> Tickets { get; set; }

    public bool EditSuccessful { get; set; }
    public bool CancelSuccessful { get; set; }

    public bool ToBeCancelled { get; set; }

    public List<int> TicketsToCancelById { get; set; }

    protected async override Task OnInitializedAsync()
    {
        ResetBools();

        if (GlobalVariables.LoggedInUser != null)
        {
            Customer = await customerService.GetCustomerByIdAsync(GlobalVariables.LoggedInUser.Id);

        }

        TurnNullFieldsToEmptyString();

        if (Customer.Tickets.Any())
        {
            Tickets = Customer.Tickets.ToList();
        }
    }

    private async Task GetUserWithId(int id)
    {
        EditSuccessful = false;
        Customer = await customerService.GetCustomerByIdAsync(id);
    }

    private async Task UpdateCustomer()
    {
        EditSuccessful = true;
        await customerService.UpdateCustomer(Customer);
    }

    private async Task CancelTickets()
    {
        var result = await ticketService.CancelTicketsAsync(TicketsToCancelById);

        if (result)
        {
            foreach (var ticketsToCancel in TicketsToCancelById)
            {
                Customer.Tickets.Remove(Customer.Tickets.FirstOrDefault(x => x.Id == ticketsToCancel));
            }

            CancelSuccessful = true;
        }
    }

    private void AddTicketToCancelList(int ticketId)
    {
        if(TicketsToCancelById != null)
        {
            if (!TicketsToCancelById.Contains(ticketId))
            {
                TicketsToCancelById.Add(ticketId);
            }
            else
            {
                TicketsToCancelById.Remove(ticketId);
            }
        }
        else
        {
            TicketsToCancelById = new();
            TicketsToCancelById.Add(ticketId);
        }
    }

    private void SortTicketList(int columnid)
    {
        switch (columnid)
        {
            case 1:
                Tickets.Sort((x, y) => x.DateOfPurchase.CompareTo(y.DateOfPurchase));
                break;
            case 2:
                Tickets.Sort((x, y) => x.EventDate.CompareTo(y.EventDate));
                break;
            case 3:
                Tickets.Sort((x, y) => x.TicketCategory.Name.CompareTo(y.TicketCategory.Name));
                break;
            case 4:
                Tickets.Sort((x, y) => x.TicketCategory.Price.CompareTo(y.TicketCategory.Price));
                break;
            case 5:
                Tickets.Sort((x, y) => x.EventName.CompareTo(y.EventName));
                break;
            case 6:
                Tickets.Sort((x, y) => x.VenueName.CompareTo(y.VenueName));
                break;

            default:
                break;
        }
    }

    private void ResetBools()
    {
        EditSuccessful = false;
        CancelSuccessful = false;
    }



    private void TurnNullFieldsToEmptyString()
    {
        if (Customer.FirstName == null)     Customer.FirstName = "";
        if (Customer.LastName == null)      Customer.LastName = "";
        if (Customer.Email == null)         Customer.Email = "";
        if (Customer.BankAccount == null)   Customer.BankAccount = "";
        if (Customer.PhoneNumber == null)   Customer.PhoneNumber = "";
        if (Customer.Address == null)
        {
            Customer.Address =  new AddressDto
            {
                Id = 0,
                City = "",
                Country = "",
                PostalCode = "",
                Street ="",
                StreetNumber=""
            };
        }
    }

}
