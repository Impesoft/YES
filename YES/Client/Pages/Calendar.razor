@page "/Calendar"
@inject NavigationManager navigationManager

@* <div class="banner"></div> *@

<div class="page-bg">
    <section>
        <div class="head-wrapper">
            <h2 class="mb-3">Events</h2>
            <div class="input-group mb-3">
                <input type="text" class="form-control" placeholder="Search" @bind-value="_searchValue" @bind-value:event="oninput">
                <button class="btn btn-outline-secondary" type="button" @onclick="@(() => _searchValue = "")" ><i class="fas fa-eraser"></i></button>
            </div>
        </div>

        @if (_events != null)
        {
            <div class="scrollable">
        
                <table class="table table-dark table-hover">
                    <thead>
                        <tr>
                            <th class="col-sm-2 col-xxl-2 display-date" scope="col">Date</th>
                            <th class="col-sm-8 col-xxl-5" scope="col">Name</th>
                            <th class="col-xxl-3 display-venue" scope="col">Venue</th>
                            <th class="col-sm-2 col-xxl-2 text-end" scope="col">Status</th>
                        </tr>
                    </thead>
                    <tbody>
                    @foreach (EventDto eventDto in _events.Where(x => x.EventInfo.Name.ToLower().Contains(_searchValue.ToLower())
                                                                      || x.EventInfo.Description.ToLower().Contains(_searchValue.ToLower())
                                                                      || x.Status.ToLower().Contains(_searchValue.ToLower())).ToList())
                    {
                        <EventList Event="eventDto" EventInfo="() => ShowEventInfo(eventDto)"/>
                    }
                    </tbody>
                </table>
        
            </div>
        }
        else
        {
            <CalendarPlaceholder />
        }
    </section>
</div>


@code {
    private IEnumerable<EventDto> _events { get; set; }
    private IEnumerable<EventDto> _filteredList { get; set; }
    private string _searchValue { get; set; } = "";

    [Inject]
    private IEventService _service { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _events = await _service.GetEventsAsync();
        _filteredList = _events;
    }

    private void ShowEventInfo(EventDto eventDto)
    {
        navigationManager.NavigateTo($"/EventDetail/{eventDto.Id}");
    }

    private void SortEventsByDate()
    {
        _events.OrderBy(x => x.EventInfo.EventDate);
    }
}