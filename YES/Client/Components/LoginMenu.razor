@using Newtonsoft.Json;
@inject IJSRuntime JSRuntime
@inject IAccountService _accountService
@inject NavigationManager navigationManager
@using YES.Shared.Enums
@using System.Net.Mail
@using System.Diagnostics.Contracts

<div>
    @if (LoggedInUser == null)
    {
        <span class="login-logout" @onclick="@ShowLoginModal"><i class="fas fa-sign-out-alt"></i>Login</span>
    }
    else
    {
        <div class="greeting-wrapper">
            @if (LoggedInUser.Role == Roles.Default || LoggedInUser.Role == Roles.TicketCustomer)
	        {
                <a href="customerdetail" class="greeting">Hello, @LoggedInUser.GreetingName</a>	 
	        }
            else if(LoggedInUser.Role == Roles.TicketProvider)
            {
                <a href="providerdetail" class="greeting">Hello, @LoggedInUser.GreetingName</a>
            }
            <span class="login-logout" @onclick="LogOut"><i class="fas fa-sign-out-alt"></i>Logout</span>
        </div>
    }

    <Modal @ref="_loginModal">
        <ModalContent Centered="true" Class="bg-dark text-light" Size="ModalSize.Small">
            <ModalHeader>
                <ModalTitle>Log In</ModalTitle>
                <CloseButton Class="close-btn btn" />
            </ModalHeader>
            <ModalBody>
                <Login LoginInfo="@LoginInfo" 
                       LogIn="@(LogIn)"
                       ShowRegisterModal="@(ShowRegisterModal)"
                       LoginFailed="LoginFailed"
                       ResponseMessage="ResponseMessage"/>
                
            </ModalBody>
        </ModalContent>
    </Modal>
    
    <Modal @ref="_registerModal">
        <ModalContent Centered="true" Class="bg-dark text-light" Size="ModalSize.Large">
            <ModalHeader>
                <ModalTitle>Register</ModalTitle>
                <CloseButton Class="close-btn btn" />
            </ModalHeader>
            <ModalBody>
                <Register RegisterCustomerInfo="RegisterCustomer"
                          RegisterProviderInfo="RegisterProvider"
                          RegisterUser="@(RegisterUser)"
                          RegisterFailed="RegisterFailed"
                          ResponseMessage="@ResponseMessage"
                          />
            </ModalBody>
        </ModalContent>
    </Modal>
</div>

@code {
    [Parameter]
    public EventCallback<UserTokenDto> SetUserInHeader { get; set; }
    [Parameter]
    public EventCallback ClearUserInHeader { get; set; }

    private UserTokenDto LoggedInUser { get; set; }

    private LoginDto LoginInfo { get; set; } = new();
    private RegisterCustomerDto RegisterCustomer { get; set; } = new();
    private RegisterProviderDto RegisterProvider { get; set; } = new();
    private bool PasswordsMatch { get; set; }

    // reference to the modal components
    private Modal _loginModal;
    private Modal _registerModal;

    public bool LoginFailed { get; set; }
    public bool RegisterFailed { get; set; }

    public string ResponseMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ResetBools();
        await SetCustomer();
    }

    private void ShowLoginModal()
    {
        _loginModal.Show();
    }

    private void HideLoginModal()
    {
        _loginModal.Hide();
    }

    private void ShowRegisterModal()
    {
        HideLoginModal();
        _registerModal.Show();
    }

    private async Task LogOut()
    {
        await JSRuntime.InvokeAsync<string>("localStorage.removeItem", "user");
        _accountService.LogOut();
        LoggedInUser = null;
        navigationManager.NavigateTo("/");
        await ClearUserInHeader.InvokeAsync();
    }

    private async Task SetCustomer()
    {
        var JsonUser = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "user");
        if (JsonUser != null)
        {
            LoggedInUser = JsonConvert.DeserializeObject<UserTokenDto>(JsonUser);
            GlobalVariables.LoggedInUser = LoggedInUser;
        }
    }

    private async Task LogIn()
    {
        ResetBools();

        var loggedInUserJson = await _accountService.LogIn(LoginInfo);
        if (loggedInUserJson == "Invalid input")
        {
            LoginFailed = true;
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "user", loggedInUserJson);
            HideLoginModal();
            await SetCustomer();

            //send user to parent
            await SetUserInHeader.InvokeAsync(LoggedInUser);
        }
    }

    private async Task RegisterUser()
    {
        ResetBools();

        PasswordsMatch = RegisterCustomer.Password == RegisterCustomer.ConfirmPassword;

        if (PasswordsMatch && !string.IsNullOrEmpty(RegisterCustomer.Password))
        {
            var response = await _accountService.RegisterUser(RegisterCustomer, RegisterProvider);
            if (response.IsSuccessStatusCode)
            {
                if (String.IsNullOrEmpty(RegisterCustomer.Email))
                {
                    LoginInfo.Email = RegisterProvider.Email;
                    LoginInfo.Password = RegisterProvider.Password;
                    await LogIn();
                }
                else if (String.IsNullOrEmpty(RegisterProvider.Email))
                {
                    LoginInfo.Email = RegisterCustomer.Email;
                    LoginInfo.Password = RegisterCustomer.Password;
                    await LogIn();
                }
            }
            else
            {
                RegisterFailed = true;
                ResponseMessage = await response.Content.ReadAsStringAsync();
            }
        }
    }

    private void ResetBools()
    {
        LoginFailed = false;
        RegisterFailed = false;
    }

}
