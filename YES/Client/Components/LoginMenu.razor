@using Newtonsoft.Json;
@inject IJSRuntime JSRuntime
@inject IAccountService _accountService
@inject NavigationManager navigationManager
@using YES.Shared.Enums
@using System.Net.Mail
@using System.Diagnostics.Contracts

<div>
    @if (LoggedInUser == null)
    {
        <i class="fas fa-sign-in-alt" @onclick="@ShowLoginModal"></i>
    }
    else
    {
        <div class="greeting-wrapper">
            @if (LoggedInUser.Role == Roles.Default || LoggedInUser.Role == Roles.TicketCustomer)
	        {
                <a href="customerdetail" class="greeting">Welcome, @LoggedInUser.GreetingName</a>	 
	        }
            else if(LoggedInUser.Role == Roles.TicketProvider)
            {
                <a href="providerdetail" class="greeting">Welcome, @LoggedInUser.GreetingName</a>
            }
            <i class="fas fa-sign-out-alt" @onclick="LogOut"></i>
        </div>
    }

    <Modal @ref="_loginModal">
        <ModalContent Centered="true" Class="bg-dark text-light" Size="ModalSize.Small">
            <ModalHeader>
                <ModalTitle>Log In</ModalTitle>
                <CloseButton Class="close-btn btn" />
            </ModalHeader>
            <ModalBody>
                <Login LoginInfo="@LoginInfo" 
                       LogIn="@(LogIn)"
                       ShowRegisterModal="@(ShowRegisterModal)"/>
            </ModalBody>
        </ModalContent>
    </Modal>
    
    <Modal @ref="_registerModal">
        <ModalContent Centered="true" Class="bg-dark text-light" Size="ModalSize.Large">
            <ModalHeader>
                <ModalTitle>Register</ModalTitle>
                <CloseButton Class="close-btn btn" />
            </ModalHeader>
            <ModalBody>
                <Register RegisterInfo="@RegisterInfo" 
                          RegisterUser="@(RegisterUser)"
                />
            </ModalBody>
        </ModalContent>
    </Modal>
</div>

@code {
    [Parameter]
    public EventCallback<UserTokenDto> SetUserInHeader { get; set; }
    [Parameter]
    public EventCallback ClearUserInHeader { get; set; }

    private UserTokenDto LoggedInUser { get; set; }

    private LoginDto LoginInfo { get; set; } = new();
    private RegisterDto RegisterInfo { get; set; } = new();
    private bool PasswordsMatch { get; set; }

    // reference to the modal components
    private Modal _loginModal;
    private Modal _registerModal;

    protected override async Task OnInitializedAsync()
    {
        await SetCustomer();
    }

    private void ShowLoginModal()
    {
        _loginModal.Show();
    }

    private void HideLoginModal()
    {
        _loginModal.Hide();
    }

    private void ShowRegisterModal()
    {
        HideLoginModal();
        _registerModal.Show();
    }

    private async Task LogOut()
    {
        await JSRuntime.InvokeAsync<string>("localStorage.removeItem", "user");
        _accountService.LogOut();
        LoggedInUser = null;
        navigationManager.NavigateTo("/");
        await ClearUserInHeader.InvokeAsync();
    }

    private async Task SetCustomer()
    {
        var JsonUser = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "user");
        if (JsonUser != null)
        {
            LoggedInUser = JsonConvert.DeserializeObject<UserTokenDto>(JsonUser);
            GlobalVariables.LoggedInUser = LoggedInUser;
        }
    }

    private async Task LogIn()
    {
        var loggedInUserJson = await _accountService.LogIn(LoginInfo);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "user", loggedInUserJson);
        HideLoginModal();
        await SetCustomer();

        //send user to parent
        await SetUserInHeader.InvokeAsync(LoggedInUser);
    }

    private async Task RegisterUser()
    {
        PasswordsMatch = RegisterInfo.Password == RegisterInfo.ConfirmPassword;

        if (PasswordsMatch && !string.IsNullOrEmpty(RegisterInfo.Password))
        {
            await _accountService.RegisterUser(RegisterInfo);
            LoginInfo.Email = RegisterInfo.Email;
            LoginInfo.Password = RegisterInfo.Password;
            await LogIn();
        }
    }

}
