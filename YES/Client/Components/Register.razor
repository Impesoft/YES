
<div>    
    <Tabs SelectedTab="@SelectedTab" SelectedTabChanged="@OnSelectedTabChanged">
        <Items>
            <Tab Name="customer">Customer</Tab>
            <Tab Name="provider">Provider</Tab>
        </Items>
        <Content>
            <TabPanel Name="customer">
                <EditForm Model="@RegisterCustomerInfo" OnValidSubmit="RegisterUser">
                    <DataAnnotationsValidator />
                    <div class="row">
                        <div class="col">
                            <label for="first-name">First Name</label>
                            <InputText id="first-name" class="form-control mt-1" placeholder="First Name" @bind-Value="RegisterCustomerInfo.FirstName" />
                            <span class="error-message"><ValidationMessage For="() => RegisterCustomerInfo.FirstName" /></span>
                        </div>
                        <div class="col">
                            <label for="last-name">Last Name</label>
                            <InputText id="last-name" class="form-control mt-1" placeholder="Last Name" @bind-Value="RegisterCustomerInfo.LastName" />
                            <span class="error-message"><ValidationMessage For="() => RegisterCustomerInfo.LastName" /></span>
                        </div>
                    </div>
                    <label for="customerEmail">Email</label>
                    <input id="customerEmail" class="form-control mt-1" placeholder="Email" type="email" @bind="RegisterCustomerInfo.Email" />
                    <span class="error-message"><ValidationMessage For="() => RegisterCustomerInfo.Email" /></span>
                    <div>
                        <label for="customerPassword">Password</label>
                        <input id="customerPassword" class="form-control mt-1" placeholder="Password" type="password" @bind="RegisterCustomerInfo.Password" />
                        <span class="error-message"><ValidationMessage For="() => RegisterCustomerInfo.Password" /></span>
                    </div>
                    <div>
                        <label for="customerConfirmPassword">Confirm Password</label>
                        <input id="customerConfirmPassword" class="form-control mt-1" placeholder="Confirm Password" type="password" @bind="RegisterCustomerInfo.ConfirmPassword" />
                        <span class="error-message"><ValidationMessage For="() => RegisterCustomerInfo.ConfirmPassword" /></span>
                    </div>

                    @if (RegisterFailed)
                    {
                        <div class="alert alert-danger mt-2">
                            @ResponseMessage
                        </div>
                    }

                    <button class="btn btn-outline-success mt-1 float-end" type="submit">Register</button>
                </EditForm>
            </TabPanel>
            <TabPanel Name="provider">
                <EditForm Model="@RegisterProviderInfo" OnValidSubmit="RegisterUser">
                    <DataAnnotationsValidator />
                    <div class="row">
                        <div class="col">
                            <label for="provider-name">Provider Name</label>
                            <InputText id="provider-name" class="form-control mt-1" placeholder="Provider Name" @bind-Value="RegisterProviderInfo.NameProvider" />
                            <span class="error-message"><ValidationMessage For="() => RegisterProviderInfo.NameProvider" /></span>
                        </div>
                        <div class="col">
                            <label for="providerEmail">Email</label>
                            <InputText id="providerEmail" class="form-control mt-1" placeholder="Email" type="email" @bind-Value="RegisterProviderInfo.Email" />
                            <span class="error-message"><ValidationMessage For="() => RegisterProviderInfo.Email" /></span>
                        </div>
                    </div>
                    <div>
                        <label for="providerPassword">Password</label>
                        <input id="providerPassword" class="form-control mt-1" placeholder="Password" type="password" @bind="RegisterProviderInfo.Password" />
                        <span class="error-message"><ValidationMessage For="() => RegisterProviderInfo.Password" /></span>
                    </div>
                    <div>
                        <label for="providerConfirmPassword">Confirm Password</label>
                        <input id="providerConfirmPassword" class="form-control mt-1" placeholder="Confirm Password" type="password" @bind="RegisterProviderInfo.ConfirmPassword" />
                        <span class="error-message"><ValidationMessage For="() => RegisterProviderInfo.ConfirmPassword" /></span>
                    </div>

                    @if (RegisterFailed)
                    {
                        <div class="alert alert-danger mt-2">
                            @ResponseMessage
                        </div>
                    }
                    <button class="btn btn-outline-success mt-1 float-end" type="submit">Register</button>
                </EditForm>
            </TabPanel>
        </Content>
    </Tabs>
</div>

@code{
    [Parameter]
    public RegisterCustomerDto RegisterCustomerInfo { get; set; }
    [Parameter]
    public RegisterProviderDto RegisterProviderInfo { get; set; }
    [Parameter]
    public EventCallback RegisterUser { get; set; }

    [Parameter]
    public bool RegisterFailed { get; set; }
    [Parameter]
    public string ResponseMessage { get; set; }
    [Parameter]
    public EventCallback<bool> IsCustomer { get; set; }


    private string SelectedTab { get; set; } = "customer";

    protected override async void OnInitialized()
    {
        RegisterCustomerInfo.Role = Roles.TicketCustomer;
        RegisterProviderInfo.Role = Roles.TicketProvider;
        await IsCustomer.InvokeAsync(true);
    }

    private async Task OnSelectedTabChanged(string name)
    {
        SelectedTab = name;
        RegisterFailed = false;
        if (name == "customer")
        {
            await IsCustomer.InvokeAsync(true);
        }
        else if (name == "provider")
        {
            await IsCustomer.InvokeAsync(false);
        }
    }

}