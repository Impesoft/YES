@using YES.Shared.Enums

<div>
    <Tabs SelectedTab="@SelectedTab" SelectedTabChanged="@OnSelectedTabChanged">
        <Items>
            <Tab Name="customer">Customer</Tab>
            <Tab Name="provider">Provider</Tab>
        </Items>
        <Content>
            <TabPanel Name="customer">
                <EditForm Model="@RegisterInfo" OnInvalidSubmit="RegisterUser">
                    <DataAnnotationsValidator />
                    <div class="row">
                        <div class="col">
                            <label for="first-name">First Name</label>
                            <InputText id="first-name" class="form-control mt-1" placeholder="First Name" @bind-Value="RegisterInfo.FirstName"/>
                            <span class="error-message"><ValidationMessage For="() => RegisterInfo.FirstName"/></span>
                        </div>
                        <div class="col">
                            <label for="last-name">Last Name</label>
                            <InputText id="last-name" class="form-control mt-1" placeholder="Last Name" @bind-Value="RegisterInfo.LastName"/>
                            <span class="error-message"><ValidationMessage For="() => RegisterInfo.LastName"/></span>
                        </div>
                    </div>
                        <label for="customerEmail">Email</label>
                    <input id="customerEmail" class="form-control mt-1" placeholder="Email" type="email" @bind="RegisterInfo.Email"/>
                    <span class="error-message"><ValidationMessage For="() => RegisterInfo.Email"/></span>
                    <div>
                        <label for="customerPassword">Password</label>
                        <input id="customerPassword" class="form-control mt-1" placeholder="Password" type="password" @bind="RegisterInfo.Password" />
                        <span class="error-message"><ValidationMessage For="() => RegisterInfo.Password"/></span>
                    </div>
                    <div>
                        <label for="customerConfirmPassword">Confirm Password</label>
                        <input id="customerConfirmPassword" class="form-control mt-1" placeholder="Confirm Password" type="password" @oninput="OnConfirmPasswordChanged" @bind="ConfirmPassword"/>
                        <span class="error-message"><ValidationMessage For="() => ConfirmPassword"/></span>
                    </div>
                    <button class="btn btn-outline-success mt-1 float-end"  type="submit">Register</button>
                </EditForm>
            </TabPanel>
            <TabPanel Name="provider">
                <EditForm Model="@RegisterInfo" OnInvalidSubmit="RegisterUser">
                    <DataAnnotationsValidator />
                    <div class="row">
                        <div class="col">
                            <label for="provider-name">Provider Name</label>
                            <InputText id="provider-name" class="form-control mt-1" placeholder="Provider Name" @bind-Value="RegisterInfo.NameProvider"/>
                            <span class="error-message"><ValidationMessage For="() => RegisterInfo.NameProvider"/></span>
                        </div>
                        <div class="col">
                            <label for="providerEmail">Email</label>
                            <InputText id="providerEmail" class="form-control mt-1" placeholder="Email" type="email" @bind-Value="RegisterInfo.Email"/>
                            <span class="error-message"><ValidationMessage For="() => RegisterInfo.Email"/></span>
                        </div>
                    </div>
                    <div>
                        <label for="providerPassword">Password</label>
                        <input id="providerPassword" class="form-control mt-1" placeholder="Password" type="password" @bind="RegisterInfo.Password"/>
                        <span class="error-message"><ValidationMessage For="() => RegisterInfo.Password"/></span>
                    </div>
                    <div>
                        <label for="providerConfirmPassword">Confirm Password</label>
                        <input id="providerConfirmPassword" class="form-control mt-1" placeholder="Confirm Password" type="password" @oninput="OnConfirmPasswordChanged" @bind="ConfirmPassword"/>
                        <span class="error-message"><ValidationMessage For="() => ConfirmPassword"/></span>
                    </div>
                    <button class="btn btn-outline-success mt-1 float-end" type="submit">Register</button>
                </EditForm>
            </TabPanel>
        </Content>
    </Tabs>
</div>

@code{
    [Parameter] 
    public RegisterDto RegisterInfo { get; set; }
    [Parameter] 
    public EventCallback RegisterUser { get; set; }
    private string SelectedTab { get; set; } = "customer";
    private string _confirmPassword;
    [Parameter] 
    public string ConfirmPassword { get; set; }
    [Parameter] 
    public EventCallback<string> ConfirmPasswordChanged { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        RegisterInfo.Role = Roles.TicketCustomer;
    }
    
    private async Task OnConfirmPasswordChanged(ChangeEventArgs e)
    {
        _confirmPassword = e.Value.ToString();
        await ConfirmPasswordChanged.InvokeAsync(_confirmPassword);
    }

    private void OnSelectedTabChanged( string name )
    {
        SelectedTab = name;
        switch (SelectedTab)
        {
            case "customer":
                RegisterInfo.Role = Roles.TicketCustomer;
                break;
            case "provider":
                RegisterInfo.Role = Roles.TicketProvider;
                break;
        }
    }
}